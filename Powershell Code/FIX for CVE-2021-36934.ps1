#Requires -RunAsAdministrator
#Requires -Version 3

<#
    .SYNOPSIS
    FIX for CVE-2021-36934

    .DESCRIPTION
    CVE: https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-36934
    Based on Reddit from the work of JoranSlingerland: https://www.reddit.com/r/sysadmin/comments/oopkwx/script_to_fix_cve202136934/
    Original GitHub script: https://github.com/JoranSlingerland/CVE-2021-36934

    .NOTES
    Version:        1.1
    Author:         Christopher Macnichol
    Creation Date: 22.07.2021
    Purpose/Change: Initial script development
    27.07.2021 - 1.1 - Chris Macnichol - Formatted Readme.  Changed Functions to Correct Verb-Noun Format.
                                         Updated functions to bypass protection engines.  IE: CrowdStrike.
                                         Basic Error Handling
                                         Added Set ACL Loop for all Config Files as Inheritance was not updated everything.
    22.07.2021 - 1.0 - TDA90 - Initial Script Development.  Log functions. Each step is a function.

    .TODO
    Better Error Handling
    Modular Volume Handling, instead of hard coding the Root Drive Letter.
#>

#Static Variables
$scriptVer = '1.1'
$WhatIfPreference=$false #Testing Only
$vulnerable = $false #Reset Variable for Testing

function Write-Log
{
  [CmdletBinding()]
  param
  (
    [String]$Message,
    [String]$Warning,
    [System.Management.Automation.ErrorRecord]$ErrorObj,
    [String]$LogFolderPath = "$env:windir\Logs",
    [String]$LogFilePrefix = 'CVE-2021-36934'
  )
 
  $Date = Get-Date -Format 'dd.MM.yyyy.HHmm'
  $Time = Get-Date -Format 'HH:mm:ss.f'
  $LogFile = "$LogFolderPath\$LogFilePrefix`_$Date.log"
 
  if (-not (Test-Path -Path $LogFolderPath))
  {
    [Void](New-Item -ItemType Directory -Path $LogFolderPath -Force)
  }
 
  if (-not (Test-Path -Path $LogFile))
  {
    [Void](New-Item -ItemType File -Path $LogFile -Force)
  }
 
  $LogMessage = "[$Time] "
 
  if ($PSBoundParameters.ContainsKey('ErrorObj'))
  {
    $LogMessage += "Error: $ErrorObj $($ErrorObj.ScriptStackTrace.Split("`n") -join ' <-- ')"
    Write-Error -Message $LogMessage
  }
  elseif ($PSBoundParameters.ContainsKey('Warning'))
  {
    $LogMessage += "Warning: $Warning"
    Write-Warning -Message $LogMessage
  }
  else
  {
    $LogMessage += "Info: $Message"
    Write-Verbose -Message $LogMessage
  }
 
  Add-Content -Path $LogFile -Value "$LogMessage"
}


Function Find-CVE202136934 
{
  $LocalUsersGroup = Get-LocalGroup -SID 'S-1-5-32-545'
  $vulnerable = $false

  if ($vulnerable -eq $false) 
  {
    if ($(Get-Acl -Path $env:windir\System32\Config\sam -ErrorAction Stop).Access.IdentityReference -match $LocalUsersGroup.Name) 
    {
      $vulnerableSAM = $true
    } else { $vulnerableSAM = $false }    

    if ($(Get-Acl -Path $env:windir\System32\Config\SECURITY -ErrorAction Stop).Access.IdentityReference -match $LocalUsersGroup.Name) 
    {
      $vulnerableSEC = $true
    } else { $vulnerableSEC = $false } 

    if ($(Get-Acl -Path $env:windir\System32\Config\SYSTEM -ErrorAction Stop).Access.IdentityReference -match $LocalUsersGroup.Name) 
    {
      $vulnerableSYS = $true
    } else { $vulnerableSYS = $false } 
  }

  if (($vulnerableSAM -or $vulnerableSEC -or $vulnerableSYS) -contains $true) 
  {
    $vulnerable = $true
    return $vulnerable
  }
  else 
  {
    $vulnerable = $false
    return $vulnerable
  }
}


Function Get-ShadowCopy 
{
  Get-CimInstance -ClassName Win32_ShadowStorage -Property Volume -ErrorAction SilentlyContinue
}

Function Remove-Shadowcopies 
{
  # Added Support for single deletions to bypass protection
  Get-CimInstance -ClassName Win32_Shadowcopy -ErrorAction SilentlyContinue | ForEach-Object -Process {
  Write-Log -Message ('Deleting VSS [{0}])' -f $($_.ID.ToLower()))
  $cmd = 'delete shadows /shadow=' + $_.ID.ToLower() + ' /quiet'
  Start-Process -FilePath $env:SystemRoot\system32\vssadmin.exe -ArgumentList $cmd -Wait -NoNewWindow -ErrorAction Stop
  } -WhatIf:$WhatIfPreference
}

Function New-Shadowcopies
{
  $null = Invoke-CimMethod -MethodName Create -ClassName Win32_ShadowCopy -Arguments @{
    Volume = 'C:\\'
  } -ErrorAction Stop -WhatIf:$WhatIfPreference | foreach-object { Write-Log ('Created Shadow Copy with ID [{0}]' -f $_.ShadowId) }
}

Function Update-ACLS 
{
  $ConfigFolder = "$env:windir\System32\Config"
  $inheritance = Get-Acl -Path $ConfigFolder
  $inheritance.SetAccessRuleProtection($true,$true)
  Set-Acl -Path $ConfigFolder -AclObject $inheritance -ErrorAction Stop -WhatIf:$WhatIfPreference
  Write-Log -Message ('Updated ACL Inheritance on {0} folder.' -f $ConfigFolder )
  $aclUpdated = Get-ChildItem -Path $configFolder -Force | Foreach-Object { Set-Acl -AclObject $inheritance -Path $_.FullName -ErrorAction Stop -Passthru }
  Write-Log -Message ('Updated ACL on {0} files.' -f $aclUpdated.count )
}

try
{
  Write-Log -Message '=============================================='
  Write-Log -Message ('.:CVE-2021-36934 Checking Tool Version [{0}]:.' -f $scriptVer)
  Write-Log -Message '=============================================='
  
  if (Find-CVE202136934 -eq $true) 
  {
    Write-Log -Warning 'CVE-2021-36934 Present'
    Write-Log -Message 'Fixing exploit'
    if (Get-ShadowCopy -eq $true) 
    {
        Write-Log -Message 'Shadow Copies detected, deleting it'
        Remove-Shadowcopies
        Write-Log -Message 'Shadow Copies deleted'
        Write-Log -Message 'Fixing ACLs'
        Update-ACLS
        Write-Log -Message 'Verifying Fix Completed'
        if (Find-CVE202136934 -eq $true) { Throw 'ACL Fix Failed.' }
        Write-Log -Message 'ACLs fixed'
        Write-Log -Message 'Creating Shadowcopy'
        New-Shadowcopies
        Write-Log -Message 'Shadowcopy created'
    }
    else 
    {
      Write-Log -Message 'Fixing ACLs'
      Update-ACLS
      Write-Log -Message 'ACLs fixed'
    }
  }
  else 
  {
    Write-Log -Message 'CVE-2021-36934 NOT Present, you are safe'
  }

  Write-Log -Message '.:CVE-2021-36934 Checking Tool:. - END'
}
catch
{
  $line = $_.InvocationInfo.ScriptLineNumber
  Write-Log -Message ('Something has gone wrong.  Error was in line [{0}]' -f $line)
  Write-Log -ErrorObj $_
  Write-Log -Message '.:CVE-2021-36934 Checking Tool:. - END with Errors'
  Exit(1603)
}